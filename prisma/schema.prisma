generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                Int      @id @default(autoincrement())
  telegramId        String   @unique @map("telegram_id")
  firstName         String   @map("first_name")
  lastName          String?  @map("last_name")
  username          String?
  phoneNumber       String?  @map("phone_number")
  department        String?
  position          String?
  isActive          Boolean  @default(true) @map("is_active")
  registeredAt      DateTime @default(now()) @map("registered_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  attendanceRecords AttendanceRecord[]
  exceptionalHours  ExceptionalHours[]
  invitation        EmployeeInvitation?

  @@map("employees")
}

model AttendanceRecord {
  id                    Int       @id @default(autoincrement())
  employeeId            Int       @map("employee_id")
  date                  DateTime  @db.Date
  checkInTime           DateTime? @map("check_in_time")
  checkOutTime          DateTime? @map("check_out_time")
  checkInLatitude       Float?    @map("check_in_latitude")
  checkInLongitude      Float?    @map("check_in_longitude")
  checkOutLatitude      Float?    @map("check_out_latitude")
  checkOutLongitude     Float?    @map("check_out_longitude")
  checkInDistance       Float?    @map("check_in_distance")
  checkOutDistance      Float?    @map("check_out_distance")
  isLate                Boolean   @default(false) @map("is_late")
  isEarlyCheckout       Boolean   @default(false) @map("is_early_checkout")
  lateReason            String?   @map("late_reason")
  earlyCheckoutReason   String?   @map("early_checkout_reason")
  workingHours          Float?    @map("working_hours")
  status                AttendanceStatus @default(INCOMPLETE)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@map("attendance_records")
}

model ExceptionalHours {
  id         Int      @id @default(autoincrement())
  employeeId Int      @map("employee_id")
  date       DateTime @db.Date
  startTime  String   @map("start_time") // Store as HH:MM format
  endTime    String   @map("end_time")   // Store as HH:MM format
  reason     String?
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by") // Admin who created this

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@map("exceptional_hours")
}

model Admin {
  id          Int      @id @default(autoincrement())
  telegramId  String   @unique @map("telegram_id")
  firstName   String   @map("first_name")
  lastName    String?  @map("last_name")
  username    String?
  role        AdminRole @default(ADMIN)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  grantedBy   String?  @map("granted_by") // Telegram ID of admin who granted access

  @@map("admins")
}

model WebUser {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String   // Hashed password
  role      AdminRole @default(ADMIN)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  lastLogin DateTime? @map("last_login")

  @@map("web_users")
}

model ConversationState {
  id           Int      @id @default(autoincrement())
  telegramId   String   @unique @map("telegram_id")
  state        String
  data         Json?    // Store conversation context
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("conversation_states")
}

model NotificationLog {
  id         Int      @id @default(autoincrement())
  type       String   // 'daily_summary', 'late_alert', etc.
  recipient  String   // Telegram ID
  message    String
  sentAt     DateTime @default(now()) @map("sent_at")
  success    Boolean

  @@map("notification_logs")
}

model ServerActivity {
  id        Int      @id @default(autoincrement())
  type      String   // 'startup', 'shutdown', 'error', 'command'
  message   String
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("server_activities")
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
  type  SettingType

  @@map("settings")
}

model EmployeeInvitation {
  id            String   @id @default(cuid())
  token         String   @unique
  firstName     String   @map("first_name")
  lastName      String?  @map("last_name")
  department    String?
  position      String?
  email         String?
  phoneNumber   String?  @map("phone_number")
  invitedBy     String   @map("invited_by") // Admin telegram ID who sent invitation
  invitedAt     DateTime @default(now()) @map("invited_at")
  acceptedAt    DateTime? @map("accepted_at")
  expiresAt     DateTime @map("expires_at") // Token expiration
  status        InvitationStatus @default(PENDING)
  employeeId    Int?     @unique @map("employee_id")
  
  // Relations
  employee      Employee? @relation(fields: [employeeId], references: [id])

  @@map("employee_invitations")
}

// Enums
enum AttendanceStatus {
  INCOMPLETE  // Only check-in or check-out
  COMPLETE    // Both check-in and check-out
  ABSENT      // No check-in for the day
  EXCUSED     // Absent but excused
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
} 